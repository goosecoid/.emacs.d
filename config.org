* Terminal
** Setting default shell to zsh
#+begin_src emacs-lisp
(defvar my-term-shell "/bin/zsh")
(defadvice ansi-term (before force-zsh)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+end_src
* Org
** Org basic config
#+begin_src emacs-lisp
  ;; Dont split window when C-c '
  (setq org-src-window-setup 'current-window)
#+end_src
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
* Saves
** Disable backups and auto save
#+begin_src emacs-lisp
  (setq save-backup-file nil)
  (setq auto-save-default nil)
#+end_src
* Aliases
** Change yes/no -> y/n
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* KB Shortcuts
** Launch ansi-term
#+begin_src emacs-lisp
(global-set-key (kbd "C-c t") 'ansi-term)
#+end_src
* Emacs global settings
** Scroll conservatively
#+begin_src emacs-lisp
(setq scroll-conservatively 100)
#+end_src
** Remove system beep
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src
** Highlight current line globally
#+begin_src emacs-lisp
;; Only enable in gui mode
(when window-system (global-hl-line-mode 1))
#+end_src
** Subword advance
#+begin_src emacs-lisp
  ;; Advance one sub word instead of a whole one (camelCase)
  (global-subword-mode 1)
#+end_src
** Electric
#+begin_src emacs-lisp
  (setq electric-pair-pairs
	'(
	  (?\( . ?\))
	  (?\[ . ?\])
	  ))
  (electric-pair-mode t)
#+end_src
** Show columns and lines
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
** Clock
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+end_src
* Emacs GUI settings
** Remove toolbar
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
** Remove menu bar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
** Remove scroll bar
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src
** Remove startup dialog
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src
* Misc packages
** Beacon
Highlights where your cursor is
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :config
    (beacon-mode 1))
#+end_src
** Which-key
Displays all possible keybindings while typing
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src
** Hungry delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src
** Sudo edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s u" . sudo-edit))
#+end_src
* IDO
** Enable IDO mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** Use ido-vertical package
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** Use smex package
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src
** Use switch buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src
* Buffers
** Kill all buffers
#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-k") 'kill-all-buffers)
#+end_src
** Enable Ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer) 
#+end_src
*** Enable expert mode
#+begin_src emacs-lisp
(setq ibuffer-expert t)
#+end_src
** Kill current buffer immediately
#+begin_src emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+end_src
* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
* Config edit/reload
** Edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
** Reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* Rainbow
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+end_src
** Set delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
* Switch windows
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-treshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src
* Window control functions
#+begin_src emacs-lisp
  ;; When splitting new window, the cursor will move to that new window
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src
* Useful functions
** Kill word
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+end_src
** Copy line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+end_src
* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Welcome back! "))
#+end_src
* Auto completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
* Modeline
** Spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+end_src
** Diminish
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (mapc #'diminish
	  '(hungry-delete-mode
	    beacon-mode
	    which-key-mode
	    subword-mode
	    rainbow-mode)))
#+end_src
* Dmenu
#+begin_src emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("C-c d" . 'dmenu))
#+end_src
* Symon
#+begin_src emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("C-c y" . symon-mode))
#+end_src
* Eldoc
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
** Ripgrep for projectile
#+BEGIN_SRC emacs-lisp
  (use-package ripgrep
    :ensure t)
#+END_SRC
* LSP
#+BEGIN_SRC emacs-lisp
  ;; prefix for lsp-command-keymap
  (setq lsp-keymap-prefix "C-c l")

  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :hook (
	    (typescript-mode . lsp-deferred)
	    (go-mode . lsp-deferred)
	    (haskell-mode .lsp-deferred)
	    (lsp-mode . lsp-enable-which-key-integration)))

  ;; Optional lsp deps
  (use-package lsp-ui :ensure t :commands lsp-ui-mode)
  (use-package lsp-ivy :ensure t :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :ensure t :commands lsp-treemacs-errors-list)

  ;; Golang
  (use-package go-mode
    :ensure t)

  (add-hook 'go-mode-hook 'lsp-deferred)

  ;; Typescript
  (use-package typescript-mode
    :ensure t
    :hook
    (typescript-mode . lsp-deferred)
    :mode (("\\.ts\\'" . typescript-mode)
	   ("\\.tsx\\'" . typescript-mode)))

  (setq typescript-indent-level 2)

  (use-package web-mode
    :ensure t
    :mode (("\\.html\\'" . web-mode)
	     ("\\.vue\\'" . web-mode)
	     ("\\.json\\'" . web-mode))
    :commands web-mode
    :config
    (setq company-tooltip-align-annotations t)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-part-face t))

  ;; Haskell
  (use-package lsp-haskell
    :ensure t)

  (use-package haskell-mode
    :ensure t
    :hook
    (haskell-mode . lsp-deferred))

  ;; Hooks so haskell and literate haskell major modes trigger LSP setup
  (add-hook 'haskell-mode-hook #'lsp)
  (add-hook 'haskell-literate-mode-hook #'lsp)

  ;; use flycheck over flymake for haskell
  (use-package flycheck-haskell
    :ensure t)

  (add-hook 'haskell-mode-hook #'flycheck-haskell-setup)
#+END_SRC
* Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay      0.5
	    treemacs-directory-name-transformer    #'identity
	    treemacs-display-in-side-window        t
	    treemacs-eldoc-display                 t
	    treemacs-file-event-delay              5000
	    treemacs-file-extension-regex          treemacs-last-period-regex-value
	    treemacs-file-follow-delay             0.2
	    treemacs-file-name-transformer         #'identity
	    treemacs-follow-after-init             t
	    treemacs-git-command-pipe              ""
	    treemacs-goto-tag-strategy             'refetch-index
	    treemacs-indentation                   2
	    treemacs-indentation-string            " "
	    treemacs-is-never-other-window         nil
	    treemacs-max-git-entries               5000
	    treemacs-missing-project-action        'ask
	    treemacs-move-forward-on-expand        nil
	    treemacs-no-png-images                 nil
	    treemacs-no-delete-other-windows       t
	    treemacs-project-follow-cleanup        nil
	    treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                      'left
	    treemacs-recenter-distance             0.1
	    treemacs-recenter-after-file-follow    nil
	    treemacs-recenter-after-tag-follow     nil
	    treemacs-recenter-after-project-jump   'always
	    treemacs-recenter-after-project-expand 'on-distance
	    treemacs-show-cursor                   nil
	    treemacs-show-hidden-files             t
	    treemacs-silent-filewatch              nil
	    treemacs-silent-refresh                nil
	    treemacs-sorting                       'alphabetic-asc
	    treemacs-space-between-root-nodes      t
	    treemacs-tag-follow-cleanup            t
	    treemacs-tag-follow-delay              1.5
	    treemacs-user-mode-line-format         nil
	    treemacs-user-header-line-format       nil
	    treemacs-width                         35
	    treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)
	   ("C-x C-g" . magit-status)))
#+END_SRC
* EXWM
 #+begin_src emacs-lisp
   ;; (use-package exwm
   ;;   :ensure t
   ;;   :config
   ;;   (require 'exwm-config)
   ;;   (exwm-config-default))
 #+end_src
** System tray
#+begin_src emacs-lisp
  ;; (require 'exwm-systemtray)
  ;; (exwm-systemtray-enable)
#+end_src
** Workspaces
#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-c k") 'exwm-workspace-delete)
  ;; (global-set-key (kbd "C-c j") 'exwm-workspace-swap)
  ;; (global-set-key (kbd "C-c l") 'exwm-workspace-switch)
#+end_src
* Load envs for mac os
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC
* SLY
#+begin_src emacs-lisp
  (use-package sly
    :ensure t)
#+end_src
* YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC
