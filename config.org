* Terminal
** Setting default shell to zsh
#+begin_src emacs-lisp
(defvar my-term-shell "/bin/zsh")
(defadvice ansi-term (before force-zsh)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+end_src

* Org
** Org basic config
#+begin_src emacs-lisp
  ;; Dont split window when C-c '
  (setq org-src-window-setup 'current-window)
#+end_src
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src

* Saves
** Disable backups and auto save
#+begin_src emacs-lisp
  (setq save-backup-file nil)
  (setq auto-save-default nil)
#+end_src

* Aliases
** Change yes/no -> y/n
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* KB Shortcuts
** Launch ansi-term
#+begin_src emacs-lisp
(global-set-key (kbd "<s-return>") 'ansi-term)
#+end_src

* Emacs global settings
** Scroll conservatively
#+begin_src emacs-lisp
(setq scroll-conservatively 100)
#+end_src
** Remove system beep
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src
** Highlight current line globally
#+begin_src emacs-lisp
;; Only enable in gui mode
(when window-system (global-hl-line-mode 1))
#+end_src

** Subword advance
#+begin_src emacs-lisp
  ;; Advance one sub word instead of a whole one (camelCase)
  (global-subword-mode 1)
#+end_src
** Electric
#+begin_src emacs-lisp
  (setq electric-pair-pairs
	'(
	  (?\( . ?\))
	  (?\[ . ?\])
	  ))
  (electric-pair-mode t)
#+end_src
** Show columns and lines
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
* Emacs GUI settings
** Remove toolbar
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
** Remove menu bar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
** Remove scroll bar
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src
** Remove startup dialog
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src
* Misc packages
** Beacon
Highlights where your cursor is
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :config
    (beacon-mode 1))
#+end_src
** Which-key
Displays all possible keybindings while typing
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src
** Hungry delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src
** Sudo edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s u" . sudo-edit))
#+end_src
* IDO
** Enable IDO mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** Use ido-vertical package
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** Use smex package
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src
** Use switch buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src
* Buffers
** Kill all buffers
#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-k") 'kill-all-buffers)
#+end_src
** Enable Ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer) 
#+end_src
*** Enable expert mode
#+begin_src emacs-lisp
(setq ibuffer-expert t)
#+end_src
** Kill current buffer immediately
#+begin_src emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+end_src
* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
* Config edit/reload
** Edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
** Reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* Rainbow
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+end_src
* Switch windows
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-treshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src
* Window control functions
#+begin_src emacs-lisp
  ;; When splitting new window, the cursor will move to that new window
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src
* Useful functions
** Kill word
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+end_src




** Copy line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+end_src
